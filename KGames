<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KoreanCozy - Learn Korean Through Cozy Games</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            min-height: 100vh;
            color: #2d3436;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            padding: 40px 0;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        h1 {
            color: #e17055;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .tagline {
            color: #636e72;
            font-size: 1.2em;
        }

        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }

        .game-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }

        .game-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .game-icon {
            font-size: 3em;
            margin-bottom: 20px;
        }

        .game-title {
            color: #e17055;
            font-size: 1.5em;
            margin-bottom: 15px;
        }

        .game-description {
            color: #636e72;
            line-height: 1.6;
            margin-bottom: 20px;
        }

        .play-button {
            background: linear-gradient(135deg, #fd79a8, #fdcb6e);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .play-button:hover {
            transform: scale(1.05);
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background: #dfe6e9;
            border-radius: 5px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #00b894, #00cec9);
            border-radius: 5px;
            transition: width 0.3s ease;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            color: #e17055;
            font-weight: bold;
        }

        .stat-label {
            color: #636e72;
            font-size: 0.9em;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 40px;
            border-radius: 20px;
            max-width: 500px;
            width: 90%;
            text-align: center;
        }

        .close {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 2em;
            cursor: pointer;
            color: #636e72;
        }

        .hangul-character {
            font-size: 3em;
            color: #e17055;
            margin: 20px 0;
        }

        .answer-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin: 20px 0;
        }

        .answer-btn {
            padding: 15px;
            border: 2px solid #dfe6e9;
            background: white;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .answer-btn:hover {
            border-color: #fd79a8;
            background: #fff5f7;
        }

        .answer-btn.correct {
            background: #d1f2eb;
            border-color: #00b894;
        }

        .answer-btn.incorrect {
            background: #fadbd8;
            border-color: #e84393;
        }

        @media (max-width: 768px) {
            .game-grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üå∏ KoreanCozy üå∏</h1>
            <p class="tagline">Learn Korean through relaxing, cozy games at your own pace</p>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 25%"></div>
            </div>
            <p>Your Progress: Beginner Level - 25% Complete</p>
        </header>

        <div class="stats">
            <div class="stat-item">
                <div class="stat-number">15</div>
                <div class="stat-label">Words Learned</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">3</div>
                <div class="stat-label">Games Played</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">45</div>
                <div class="stat-label">Minutes Practiced</div>
            </div>
        </div>

        <div class="game-grid">
            <div class="game-card" onclick="openGame('hangul')">
                <div class="game-icon">üìö</div>
                <h3 class="game-title">Hangul Garden</h3>
                <p class="game-description">Plant seeds for each Korean character you learn. Watch your garden grow as you master the Korean alphabet!</p>
                <button class="play-button">Start Gardening</button>
            </div>

            <div class="game-card" onclick="openGame('vocabulary')">
                <div class="game-icon">üéØ</div>
                <h3 class="game-title">Word Target</h3>
                <p class="game-description">Relaxing archery game where you match Korean words with their meanings. No pressure, just peaceful practice!</p>
                <button class="play-button">Take Aim</button>
            </div>

            <div class="game-card" onclick="openGame('memory')">
                <div class="game-icon">üß©</div>
                <h3 class="game-title">Memory Cafe</h3>
                <p class="game-description">Cozy memory matching game with Korean vocabulary. Enjoy virtual tea while you learn!</p>
                <button class="play-button">Visit Cafe</button>
            </div>

            <div class="game-card" onclick="openGame('story')">
                <div class="game-icon">üìñ</div>
                <h3 class="game-title">Story Time</h3>
                <p class="game-description">Interactive Korean stories where you choose the vocabulary. Learn through gentle, heartwarming tales!</p>
                <button class="play-button">Read Stories</button>
            </div>

            <div class="game-card" onclick="openGame('bubble')">
                <div class="game-icon">ü´ß</div>
                <h3 class="game-title">Bubble Pop</h3>
                <p class="game-description">Pop bubbles with Korean words in this super relaxing game. Perfect for unwinding while learning!</p>
                <button class="play-button">Pop Bubbles</button>
            </div>

            <div class="game-card" onclick="openGame('jigsaw')">
                <div class="game-icon">üß©</div>
                <h3 class="game-title">Culture Jigsaw</h3>
                <p class="game-description">Piece together beautiful Korean cultural images while learning related vocabulary. No timer, just zen!</p>
                <button class="play-button">Start Puzzling</button>
            </div>
        </div>
    </div>

    <!-- Modal for games -->
    <div id="gameModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2 id="modalTitle">Game Title</h2>
            <div id="modalBody">
                <!-- Game content will be inserted here -->
            </div>
        </div>
    </div>

    <script>
        // Korean learning content
        const koreanContent = {
            hangul: [
                { char: '„Ñ±', sound: 'g/k', example: 'Í∞ÄÎ∞© (bag)' },
                { char: '„Ñ¥', sound: 'n', example: 'ÎÇòÎπÑ (butterfly)' },
                { char: '„Ñ∑', sound: 'd/t', example: 'ÎèÑÏÑúÍ¥Ä (library)' },
                { char: '„Ñπ', sound: 'r/l', example: 'Î¶¨Î≥∏ (ribbon)' },
                { char: '„ÖÅ', sound: 'm', example: 'ÎßàÏö∞Ïä§ (mouse)' }
            ],
            vocabulary: [
                { word: 'ÏïàÎÖïÌïòÏÑ∏Ïöî', meaning: 'Hello', category: 'greeting' },
                { word: 'Í∞êÏÇ¨Ìï©ÎãàÎã§', meaning: 'Thank you', category: 'polite' },
                { word: 'Î¨º', meaning: 'Water', category: 'noun' },
                { word: 'Ïßë', meaning: 'House', category: 'noun' },
                { word: 'ÏÇ¨Îûë', meaning: 'Love', category: 'noun' }
            ]
        };

        let currentGame = '';
        let score = 0;

        function openGame(gameType) {
            currentGame = gameType;
            const modal = document.getElementById('gameModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');

            switch(gameType) {
                case 'hangul':
                    modalTitle.textContent = 'Hangul Garden';
                    modalBody.innerHTML = createHangulGame();
                    break;
                case 'vocabulary':
                    modalTitle.textContent = 'Word Target';
                    modalBody.innerHTML = createVocabularyGame();
                    break;
                case 'memory':
                    modalTitle.textContent = 'Memory Cafe';
                    modalBody.innerHTML = createMemoryGame();
                    break;
                default:
                    modalTitle.textContent = 'Coming Soon!';
                    modalBody.innerHTML = '<p>This cozy game is being prepared for you! üå∏</p>';
            }

            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('gameModal').style.display = 'none';
        }

        function createHangulGame() {
            const randomChar = koreanContent.hangul[Math.floor(Math.random() * koreanContent.hangul.length)];
            return `
                <div class="hangul-character">${randomChar.char}</div>
                <p>What sound does this character make?</p>
                <div class="answer-options">
                    <button class="answer-btn" onclick="checkAnswer('${randomChar.sound}', 'g/k')">g/k</button>
                    <button class="answer-btn" onclick="checkAnswer('${randomChar.sound}', 'n')">n</button>
                    <button class="answer-btn" onclick="checkAnswer('${randomChar.sound}', 'd/t')">d/t</button>
                    <button class="answer-btn" onclick="checkAnswer('${randomChar.sound}', 'r/l')">r/l</button>
                </div>
                <p>Example: ${randomChar.example}</p>
            `;
        }

        function createVocabularyGame() {
            const randomWord = koreanContent.vocabulary[Math.floor(Math.random() * koreanContent.vocabulary.length)];
            const wrongAnswers = koreanContent.vocabulary
                .filter(item => item.word !== randomWord.word)
                .sort(() => Math.random() - 0.5)
                .slice(0, 3)
                .map(item => item.meaning);
            
            const options = [randomWord.meaning, ...wrongAnswers].sort(() => Math.random() - 0.5);
            
            return `
                <div class="hangul-character">${randomWord.word}</div>
                <p>What does this word mean?</p>
                <div class="answer-options">
                    ${options.map(option => 
                        `<button class="answer-btn" onclick="checkAnswer('${randomWord.meaning}', '${option}')">${option}</button>`
                    ).join('')}
                </div>
                <p>Category: ${randomWord.category}</p>
            `;
        }

        function createMemoryGame() {
            return `
                <p>Welcome to Memory Cafe! ‚òï</p>
                <p>Match the Korean words with their meanings in this peaceful memory game.</p>
                <p>Take your time - there's no rush in our cozy cafe!</p>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; margin: 20px 0;">
                    ${koreanContent.vocabulary.slice(0, 4).map((item, index) => `
                        <div style="padding: 20px; background: #f8f9fa; border-radius: 10px; cursor: pointer; text-align: center;">
                            ${index % 2 === 0 ? item.word : item.meaning}
                        </div>
                    `).join('')}
                </div>
                <p><small>Click cards to flip them and find matching pairs!</small></p>
            `;
        }

        function checkAnswer(correct, selected) {
            const buttons = document.querySelectorAll('.answer-btn');
            buttons.forEach(btn => {
                btn.disabled = true;
                if (btn.textContent === correct) {
                    btn.classList.add('correct');
                } else if (btn.textContent === selected && selected !== correct) {
                    btn.classList.add('incorrect');
                }
            });

            if (correct === selected) {
                score++;
                setTimeout(() => {
                    alert('üå∏ Perfect! You got it right!');
                    openGame(currentGame);
                }, 1500);
            } else {
                setTimeout(() => {
                    alert(`üíù Nice try! The answer was: ${correct}`);
                    openGame(currentGame);
                }, 1500);
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('gameModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
